# -*- coding: utf-8 -*-
"""
@author: Robert Hennessy (rghennessy@gmail.com)

Description: This program was written to collect traffic data from google maps.
    The time and routes are stored in sqlite database.
"""

from datetime import datetime, timedelta
import os
import config
import pandas as pd
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
import sql_functions as sf
import logging
import googlemaps

week_names_sched_trips = ['monday', 'tuesday', 'wednesday', 'thursday', 
                          'friday', 'saturday', 'sunday']
day_of_week_codes = ['mon','tue','wed','thu','fri','sat','sun']
test_output_database = os.path.join(config.file_dir,'test_data_db.sqlite')
csv_file_loc = config.trips_csv_path_in
test_csv_file_loc = config.trips_tst_csv_path


def query_google_traffic(trip_index, trip_id, start_station, end_station, 
                         start_loc, end_loc):
    """
    Queries google maps for duration in traffic. Stores the results in sqlite
    database.
    
    :param: trip_index: index for the trip. The index is assigned when parsing
        the gfts
    :type: trip_index: int
    
    :param: trip_id: train number
    :type trip_id: int
    
    :param: start_station: name of the start station
    :type: start_station: string
    
    :param: end_station: name of the end station
    :type: end_station: string
    
    :param: start_loc: dict that contains the latitude and longitude of the
        start station
    :type: start_loc: dictionary
        
    :param: end_loc: dict that contains the latitude and longitude of the
        start station
    :type: end_loc: dictionary
    
    return: None
    """
    gmaps = googlemaps.Client(key=config.google_transit_api_key)
    # construct time objects
    date_str = datetime.now().date().isoformat()
    time_str = datetime.now().time().isoformat()
    day_of_week = datetime.now().isoweekday()
    now = datetime.now()
    #query google maps for the results
    directions_result = gmaps.directions(start_loc,
                                     end_loc,
                                     mode="driving",
                                     departure_time=now)
    # duration in traffic in seconds                          
    duration_in_traffic = directions_result[0]['legs'][0]['duration_in_traffic']['value']
    # create the tuple that is inserted into the database. Ensure that all
    # parameters are the right data type
    data_tuple = (str(date_str), str(time_str), int(day_of_week), 
                  int(trip_index), int(trip_id), str(start_station),
                  str(end_station), str(start_loc), str(end_loc), 
                  str(directions_result), float(duration_in_traffic))
    # create the connection to the database
    conn = sf.create_connection(test_output_database)
    # insert the deata into the database
    sf.insert_trip_data(conn, data_tuple)
    # Commit changes and close the connection to the database file
    conn.commit()
    conn.close()
    # log the task that was just completed
    print_str = (str(trip_index) + ': ' + start_station + ' to ' + end_station 
                + ' on ' + date_str + ' at ' + time_str)
    logging.info(print_str)
    return None

#  Create a tst csv to be used with the scheduler
def create_tst_csv(csv_file_loc,test_csv_file_loc):
    """
    Creates a test csv file to be used to test the scheduler. The program
    samples the first twenty rows. To ensure that the scheduler starts quickly,
    the current weekday is set to true and the deparature time is set to the
    current time plus a delta. 
    
    param: csv_file_loc: location of the csv file generated by parse_gtfs
    :type: csv_file_loc: string
    
    param: test_csv_file_loc: location of the modified csv file generated
    by this program
    :type: csv_file_loc: string  
    
    return: None
    """
    # number of rows in the tst csv
    num_of_rows_in_tst_csv = 5
    # determine the current day of the week
    day_of_week = datetime.today().weekday()
    # determine the current time
    current_time = datetime.now()
    #current_time_delta = timedelta(hours=current_time.hour, minutes=current_time.minute)
    # read in the schedule trips csv
    schedule_trips = pd.read_csv(config.trips_csv_path_in, index_col=0)
    # select the number of rows    
    rows_to_drop = schedule_trips.index[range(num_of_rows_in_tst_csv,len(schedule_trips))]   
    tst_schedule_trips = schedule_trips.drop(rows_to_drop) 
    # reset the index to start at 0
    #tst_schedule_trips = tst_schedule_trips.reset_index(drop=True)
    # set the current day to 1 for the scheduler    
    tst_schedule_trips[week_names_sched_trips[day_of_week]] = 1
    # convert the deparature time timedeltas  
    tst_schedule_trips['departure_time_timedelta_start'] = pd.to_timedelta(tst_schedule_trips['departure_time_timedelta_start'])
    # subtract off the timedelta of the first item
    tst_schedule_trips['departure_time_timedelta_start'] = tst_schedule_trips['departure_time_timedelta_start'] - tst_schedule_trips['departure_time_timedelta_start'][0]
    # add the current time and a buffer
    tst_schedule_trips['departure_time_timedelta_start'] = tst_schedule_trips['departure_time_timedelta_start'] + timedelta(minutes=1)
    # change the deparature time column
    tst_schedule_trips['departure_time_start']  = (current_time + tst_schedule_trips['departure_time_timedelta_start'])
    tst_schedule_trips['departure_time_start'] = tst_schedule_trips['departure_time_start'].dt.strftime('%H:%M:%S')   
    tst_schedule_trips.to_csv(test_csv_file_loc)
    return None
    

def run_tasks(sql_loc):
    """
    Runs the tasks stored in the task database
    
    :param: sql_loc: location of the sql task database
    :type: sql_loc: string

    : return: None
    """
    jobstores = {
        'default': SQLAlchemyJobStore(url='sqlite:///%s' % sql_loc)
    }
    scheduler = BackgroundScheduler(jobstores=jobstores)
    scheduler.start()    
    scheduler.print_jobs()
    return None

def main():
    ## If the test output database exists, delete it ##
    if os.path.isfile(test_output_database):
        os.remove(test_output_database)
    else:    # Show an error #
        print("Error: %s file not found" % test_output_database)
    
    # rename the old logger
    if os.path.isfile(config.log_file):
        new_logfile_name = 'SchedulerLog-{date:%Y-%m-%d_%H-%M-%S}.txt'.format(
            date=datetime.now())    
        os.rename(config.log_file, os.path.join(config.logs_dir,
                                                new_logfile_name))
    # create a new logger 
    logging.basicConfig(filename=config.log_file, level=logging.INFO, 
                        format = '%(asctime)s - %(levelname)s - %(message)s')
    create_tst_csv(csv_file_loc,test_csv_file_loc)
    sf.create_trip_data_table(test_output_database)
    run_tasks(config.scheduler_sql_test_loc) 
    
if __name__ == '__main__':
    main()
